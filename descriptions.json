{
  "async": "The main 'brain' that lets Ruby do many things at once without waiting. Like having multiple hands to juggle balls - you can catch and throw multiple balls at the same time! Use this when you want your program to handle lots of tasks simultaneously, like downloading files while also responding to user clicks.",
  
  "async-actor": "Creates little 'workers' (actors) that each do their own job independently. Imagine having robot helpers where each robot has one specific job and they all work at the same time. Great for building systems where different parts need to work separately but communicate with messages.",
  
  "async-bus": "A 'message bus' that lets different parts of your program talk to each other. Like a school bus route where everyone can get on and off at different stops. Use this when different parts of your app need to send announcements to each other.",
  
  "async-container": "Manages and organizes groups of async tasks, like a container that holds multiple running processes. Think of it as a lunchbox that keeps all your different foods organized. Use this to group related tasks together and manage them as a unit.",
  
  "async-cron": "Schedules tasks to run at specific times, like an alarm clock for your code. Want something to happen every hour or every day? This is your friend! Perfect for automated backups, sending daily emails, or cleaning up old files.",
  
  "async-debug": "Helps you see what's happening inside your async code when things go wrong. Like x-ray vision for your program! Use this when your async code isn't working and you need to figure out why.",
  
  "async-limiter": "Controls how many things can happen at once, like a bouncer at a club. If you're downloading 1000 files, this makes sure you only download 10 at a time so you don't overwhelm your computer. Essential for rate-limiting and preventing overload.",
  
  "async-process": "Runs other programs from within your Ruby code asynchronously. Like being able to press multiple 'Start' buttons at once for different apps. Use when you need to run command-line tools or external programs without freezing your app.",
  
  "async-service": "Helps you create long-running background services. Like having a robot that never stops working in the background. Perfect for building web servers, background workers, or any service that needs to run continuously.",
  
  "async-worker": "Creates worker threads that process jobs from a queue. Imagine a factory assembly line where workers pick up tasks from a conveyor belt. Use this for job queues and background task processing.",
  
  "async-http": "Makes HTTP requests (talking to websites) without waiting around. Like sending multiple letters at once and getting all the replies back when they're ready. Perfect for building web scrapers, API clients, or anything that needs to talk to many websites quickly.",
  
  "async-http-cache": "Remembers website responses so you don't have to ask again. Like keeping a photocopy of a book page instead of going back to the library. Speeds up apps that make the same requests repeatedly.",
  
  "async-http-capture": "Records HTTP requests and responses for testing. Like having a video camera recording all the conversations between your app and websites. Great for debugging and testing web interactions.",
  
  "async-http-faraday": "Connects the async-http library with Faraday (another popular HTTP library). Like an adapter that lets different tools work together. Use when you have existing Faraday code but want async speed.",
  
  "async-rest": "Makes working with REST APIs easier. REST is how most websites let programs talk to them. This is like having a translator who knows exactly how to ask websites for information. Perfect for building API clients.",
  
  "async-websocket": "Handles WebSocket connections - like a phone line that stays open for real-time chat. Unlike regular HTTP (which is like sending letters), WebSockets keep the conversation going. Use for chat apps, live updates, or real-time notifications.",
  
  "http-accept": "Figures out what format the browser or client wants (HTML, JSON, etc.). Like a waiter understanding whether you want food, drinks, or dessert. Essential for building APIs that respond in different formats.",
  
  "protocol-hpack": "Compresses HTTP/2 headers to save bandwidth. Like zipping up your HTTP headers into a smaller package. Automatically used by HTTP/2 servers to make things faster.",
  
  "protocol-http": "The foundation for understanding HTTP messages. Like knowing the grammar rules of how websites talk. Other HTTP libraries build on top of this.",
  
  "protocol-http1": "Handles HTTP/1.1 protocol. This is the 'classic' version of HTTP that most websites still use. Like the original recipe before HTTP/2 came along.",
  
  "protocol-http2": "Handles HTTP/2 protocol - the newer, faster version of HTTP. Like HTTP/1 but with superpowers: multiple requests at once, better compression. Use for modern high-performance web servers.",
  
  "protocol-multipart": "Handles file uploads and form data with multiple parts. When you upload a picture along with text on a website, this handles it. Essential for any app that needs file uploads.",
  
  "protocol-quic": "Implements QUIC protocol - an even newer, faster networking protocol. Like HTTP/3's foundation, built for speed and reliability. Experimental but cutting-edge.",
  
  "protocol-rack": "Connects Rack applications (like Rails) to async servers. Rack is Ruby's standard web server interface. This lets existing Ruby web apps run on async servers.",
  
  "protocol-websocket": "The low-level WebSocket protocol implementation. Like the engine that powers async-websocket. You probably want async-websocket unless you're building something custom.",
  
  "rack": "Socketry's fork of Rack - the standard Ruby web server interface. Like an adapter that lets any Ruby web framework work with any web server.",
  
  "rack-conform": "Validates and normalizes Rack requests. Like a spell-checker for web requests. Ensures requests follow the rules before your app processes them.",
  
  "async-dns": "DNS lookups without blocking. DNS turns website names (google.com) into numbers (IP addresses). This does it fast and asynchronously. Use when you need to look up many domain names.",
  
  "rubydns": "A DNS server you can run in Ruby. Like running your own phone book for the internet. Build custom DNS servers for testing, development, or special routing needs.",
  
  "falcon": "A super-fast web server for Ruby apps. Like Puma or Unicorn but uses async for speed. This is what you'd use to run a Rails or Sinatra app in production with maximum performance.",
  
  "falcon-capybara": "Lets Capybara (testing tool) work with Falcon server. Like a bridge between your tests and your async server. Use when testing apps that run on Falcon.",
  
  "falcon-limiter": "Rate limiting for Falcon web servers. Prevents people from hammering your server with too many requests. Like a bouncer for your API.",
  
  "falcon-rails": "Connects Ruby on Rails with Falcon server. Makes Rails apps run on the super-fast Falcon server. Use this for high-performance Rails deployments.",
  
  "live": "Real-time reactive views for web apps. Changes on the server instantly appear in the browser without refreshing. Like magic - the page updates itself! Perfect for dashboards and collaborative apps.",
  
  "lively": "Desktop app framework using web technologies. Build desktop apps with HTML/CSS/JavaScript but they run as native apps. Like Electron but Ruby-flavored.",
  
  "lively-electron": "Connects Lively with Electron framework. Lets you build cross-platform desktop apps. Use when you want to package your web app as a desktop application.",
  
  "utopia": "A complete web framework for building websites. Like Rails but built for async from the ground up. Includes routing, templates, and everything you need to build modern websites.",
  
  "utopia-project": "Project template and tools for Utopia framework. Like 'rails new' but for Utopia. Gets you started quickly with a new Utopia project.",
  
  "xrb": "A fast, safe HTML templating system. Like ERB but with better security and speed. Automatically escapes dangerous content so hackers can't inject bad code.",
  
  "xrb-formatters": "Formatting helpers for XRB templates. Like having a toolbox of useful functions for making pretty output. Format dates, numbers, text, etc.",
  
  "xrb-rails": "Use XRB templates in Rails apps. Brings the speed and safety of XRB to Rails. Use when you want faster, safer templates in your Rails app.",
  
  "xrb-sanitize": "Cleans up HTML to remove dangerous content. Like a security guard that inspects HTML and removes weapons. Essential for user-generated content.",
  
  "async-pool": "Manages a pool of reusable resources. Like a tool shed where you check out a tool, use it, and return it. Perfect for database connections, HTTP clients, or any limited resource.",
  
  "db": "Database abstraction layer. Like a universal translator for databases. Write code once and it works with PostgreSQL, MariaDB, etc.",
  
  "db-active_record": "Connects ActiveRecord (Rails database tool) with the db library. Lets Rails apps use async database connections.",
  
  "db-mariadb": "MariaDB database driver. Talks to MariaDB databases efficiently. Use when your app needs to store data in MariaDB.",
  
  "db-migrate": "Database migration tool. Like version control for your database structure. Helps you safely change database tables over time.",
  
  "db-model": "Simple database models and ORM. Like ActiveRecord but lighter. Map Ruby classes to database tables.",
  
  "db-postgres": "PostgreSQL database driver. Fast connections to PostgreSQL databases. The go-to choice for serious Ruby apps using PostgreSQL.",
  
  "async-redis": "Talk to Redis asynchronously. Redis is a super-fast data store. Use this for caching, session storage, or job queues without blocking.",
  
  "protocol-redis": "Low-level Redis protocol implementation. The engine under async-redis. You probably want async-redis unless building something custom.",
  
  "console": "Beautiful, structured logging for Ruby. Like a fancy journal for your program. Shows what's happening with colors, structure, and context. Essential for debugging production apps.",
  
  "console-adapter-rails": "Connects Console logging with Rails. Makes Rails logs prettier and more useful. Use in Rails apps for better logging.",
  
  "console-adapter-sidekiq": "Connects Console with Sidekiq (job processor). Better logging for your background jobs.",
  
  "console-output-datadog": "Sends Console logs to Datadog monitoring service. Like having a security camera that records all your logs to the cloud.",
  
  "async-rspec": "Run RSpec tests asynchronously. Makes your test suite faster by running tests in parallel. Use for projects with lots of tests.",
  
  "covered": "Code coverage tool. Shows which parts of your code are tested and which aren't. Like highlighting your code to see what tests touch. Helps you write better tests.",
  
  "sus": "A modern testing framework. Like RSpec or Minitest but built for async code. Simple, fast, and designed for socketry libraries.",
  
  "sus-fixtures-async": "Test helpers for async code in Sus. Makes testing async behavior easier. Use when writing Sus tests for async code.",
  
  "sus-fixtures-async-http": "Test helpers for HTTP code in Sus. Mock servers, test HTTP interactions. Essential for testing HTTP clients.",
  
  "sus-fixtures-console": "Test helpers for Console logging in Sus. Verify your logs in tests.",
  
  "io-endpoint": "Abstracts different I/O sources (files, sockets, etc.). Like a universal remote for different types of I/O. Low-level foundation for other libraries.",
  
  "io-event": "Event loop for async I/O. The heart that pumps blood through the async system. Low-level; usually used automatically by async.",
  
  "io-memory": "In-memory I/O buffers. Like temporary notepads in RAM. Useful for testing or temporary storage.",
  
  "io-stream": "Stream handling for I/O. Read and write data in chunks. Like reading a book page by page instead of all at once.",
  
  "io-watch": "Watch files and directories for changes. Like a guard dog that barks when files change. Perfect for auto-reloading code during development.",
  
  "localhost": "Manages SSL certificates for localhost development. Makes HTTPS work on your computer during development. No more browser warnings!",
  
  "decode": "Decodes various data formats. Like a universal translator for data. Handles JSON, YAML, MessagePack, etc.",
  
  "performance": "Performance monitoring and profiling tools. Like a fitness tracker for your code. Measures speed and finds bottlenecks.",
  
  "rubocop-socketry": "Code style checker for socketry projects. Like a grammar checker for Ruby code. Keeps code consistent.",
  
  "cloudflare": "Cloudflare API client. Talk to Cloudflare's CDN and security services. Manage DNS, SSL, firewall rules programmatically.",
  
  "cloudflare-dns-update": "Updates Cloudflare DNS records automatically. Like a robot that updates your domain settings. Perfect for dynamic DNS.",
  
  "variant": "Type checking and validation. Makes sure data has the right shape. Like TSA security checking that everything is correct.",
  
  "fiber-local": "Fiber-local storage (like thread-local but for fibers). Each fiber gets its own variables. Like giving each async task its own locker.",
  
  "fiber-profiler": "Profile fiber performance. Find out which fibers are slow. Like a stopwatch for each async task.",
  
  "metrics": "Application metrics and monitoring. Count things, measure times, track trends. Like the dashboard in your car showing speed and fuel.",
  
  "metrics-backend-datadog": "Send metrics to Datadog. Datadog is a monitoring service. Use for production monitoring.",
  
  "metrics-backend-statsd": "Send metrics to StatsD. StatsD is a metrics aggregator. Another option for production metrics.",
  
  "traces": "Distributed tracing for requests. Follow a request through your entire system. Like GPS tracking for requests through microservices.",
  
  "traces-backend-datadog": "Send traces to Datadog APM. Application Performance Monitoring.",
  
  "traces-backend-open_telemetry": "Send traces using OpenTelemetry standard. The new industry standard for observability.",
  
  "types": "Type definitions for Ruby. Like TypeScript for Ruby. Add type hints to catch bugs early.",
  
  "async-cable": "ActionCable implementation using async. Real-time features for Rails using WebSockets. Better performance than standard ActionCable.",
  
  "async-job": "Background job processing system. Like Sidekiq but async. Process jobs in the background without blocking.",
  
  "async-job-adapter-active_job": "Use async-job with Rails ActiveJob. Makes Rails background jobs faster.",
  
  "async-job-processor-redis": "Process async-job jobs from Redis. Redis stores the job queue.",
  
  "async-await": "Experimental async/await syntax for Ruby. Like JavaScript's async/await. Makes async code look synchronous.",
  
  "async-container-supervisor": "Supervises containers and restarts them if they crash. Like a lifeguard for your async processes.",
  
  "async-safe": "Thread-safe async operations. Ensures safety when using async with threads.",
  
  "async-webdriver": "Control web browsers asynchronously for testing. Like Selenium but async. Automate browser testing.",
  
  "memory": "Memory profiling and leak detection. Find out why your app uses too much RAM. Like a detective for memory issues.",
  
  "memory-leak": "Demo of memory leak patterns. Educational tool showing common memory problems.",
  
  "process-metrics": "Metrics about the Ruby process itself. CPU, memory, GC stats. Monitor your app's health.",
  
  "qrcode": "Generate QR codes. Those square barcodes you scan with your phone. Use for tickets, authentication, sharing links.",
  
  "string-format": "Advanced string formatting. Like printf on steroids. Format text with patterns.",
  
  "multipart-post": "HTTP multipart form encoding. Upload files via HTTP. Standard way to send files to web servers.",
  
  "async-examples": "Example code showing how to use async. Learning resource with working examples.",
  
  "flappy-bird": "Flappy bird game implementation. Demo/fun project. Shows what you can build with these tools!",
  
  "async-discord": "Discord bot framework using async. Build Discord bots that can handle many users. Create chat bots for Discord servers.",
  
  "async-slack": "Slack bot framework using async. Build Slack bots. Automate Slack workflows.",
  
  "async-ollama": "Client for Ollama (local AI/LLM server). Talk to local language models asynchronously. Build AI-powered features without cloud APIs.",
  
  "falcon-benchmark": "Performance benchmarks for Falcon server. Measures how fast Falcon is. Used for optimization work.",
  
  "falcon-example-sinatra": "Example of running Sinatra on Falcon. Shows how to use Falcon with Sinatra apps.",
  
  "falcon-examples": "Collection of Falcon examples. Learning resource for Falcon features.",
  
  "falcon-my_api": "API template project for Falcon. Quick-start for building APIs.",
  
  "falcon-rails-examples": "Examples of Rails apps on Falcon. Shows Rails + Falcon integration.",
  
  "falcon-virtual-docker-example": "Docker setup for Falcon. Shows how to containerize Falcon apps.",
  
  "live-audio-js": "JavaScript client for Live audio streaming. Real-time audio in browsers.",
  
  "live-js": "JavaScript client for Live framework. Browser-side code for real-time updates.",
  
  "utopia-falcon-heroku": "Deploy Utopia on Heroku with Falcon. Heroku deployment configuration.",
  
  "async-http-full-duplex-streaming": "HTTP streaming example. Shows simultaneous upload/download.",
  
  "async-websocket-pubsub-example": "WebSocket pub/sub example. Shows real-time messaging patterns.",
  
  "roda-websockets": "WebSocket support for Roda framework. Add real-time features to Roda apps.",
  
  "async-sequel": "Use Sequel ORM asynchronously. Async version of popular database library.",
  
  "guard-falcon": "Guard plugin for Falcon. Auto-restart Falcon when files change during development.",
  
  "migrate": "Database migration tool (older). Consider db-migrate instead for new projects.",
  
  "rackula": "Static site generator from Rack apps. Turn dynamic sites into static HTML.",
  
  "async-http-faraday": "Faraday adapter for async-http. Use Faraday with async speed.",
  
  "benchmark-http": "HTTP server benchmarking tool. Compare performance of different servers.",
  
  "bake-test-types": "Type checking for Bake tasks. Add type safety to build scripts.",
  
  "sus-fixtures-agent-context": "Test fixtures for agent contexts. Testing helper for specific use cases.",
  
  "sus-fixtures-async-webdriver": "Test fixtures for browser automation. Helper for webdriver tests.",
  
  "sus-fixtures-benchmark": "Test fixtures for benchmarks. Standardized performance testing.",
  
  "sus-fixtures-openssl": "Test fixtures for SSL/TLS. Mock certificates and SSL contexts.",
  
  "sus-fixtures-time": "Test fixtures for time manipulation. Control time in tests.",
  
  "sus-vscode": "VSCode extension for Sus testing. Run tests from your editor.",
  
  "xrb-vscode": "VSCode extension for XRB templates. Syntax highlighting and tools.",
  
  "cool.io": "Event loop library. Alternative to io-event. Older, consider io-event instead.",
  
  "lightio": "Lightweight I/O library. Another async approach. Experimental.",
  
  "nio4r": "Ruby wrapper for libev/libuv. Low-level async I/O. Foundation for other libraries.",
  
  "thread-local": "Thread-local storage utilities. Variables unique per thread.",
  
  "timers": "Timer management for async code. Schedule things to happen later.",
  
  "community": "Community resources and guidelines. Not code - community docs.",
  
  "data": "Data structure utilities. Helpers for working with data.",
  
  "logos": "Socketry organization logos and branding. Graphics, not code.",
  
  "katacoda": "Katacoda tutorials (deprecated). Old educational content.",
  
  "rspec-files": "RSpec matchers for file operations. Test file I/O in RSpec.",
  
  "rspec-memory": "RSpec matchers for memory checks. Test memory usage in RSpec.",
  
  "process-terminal": "Terminal/PTY handling for processes. Run programs in fake terminals.",
  
  "rails-falcon-heroku": "Deploy Rails on Heroku with Falcon. Heroku configuration.",
  
  "utopia-wiki": "Utopia framework wiki/documentation. Educational resource.",
  
  ".github": "GitHub organization settings. Not a library - GitHub config.",
  
  "action-cable-next-playground": "Experimental ActionCable improvements. Testing ground for new ideas.",
  
  "fiber_basic_benchmarks": "Basic fiber performance tests. Educational/research code."
}
